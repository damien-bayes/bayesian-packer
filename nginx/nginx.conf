# Nginx Configuration
#
# Project: Baythium Packer Client
# File: /nginx/nginx.conf
# Organization: Baythium Ecosystem: https://baythium.com

###################
# SIMPLE DIRECTIVES
###################

# LOAD MODULES
# load_module /usr/local/nginx/modules/ngx_nchan_module.so;
# include /usr/share/nginx/modules/*.conf;

# Specify a user account and group (Defines the account under which Nginx worker process will be executed on the server)
# WARNING: The user should exist on the server before Nginx starts or else there will be an error while starting Nginx services.
# WARNING: Nginx should be executed under a least-privileged account.
user nginx nginx;

# master_process on;

# Start functioning with a single worker process
# NOTE: Make this value equal to the number of processors on your server, i.e. one worker per CPU-core
# NOTE: Setting the value to auto is also permitted and in that case Nginx tries to autodetect the number of cores.
worker_processes 1; # 1, 2, 4, 8, 16, 32, auto

# worker_rlimit_nofile 40000;

# Define the file name that stores the process ID of the master process /var/run/nginx.pid.
# NOTE: Required for automating the monitoring of processes.
# Examples:
# ps -ax | grep nginx
# ps -p 30212 -o etime=
# ps -p `cat /var/run/nginx.pid` -o etime=
pid /var/run/nginx.pid;

##################
# BLOCK DIRECTIVES
##################

# Define event contexts
events {
  # Allow a maximum of 4096 concurrent worker connections.
  # NOTE: The number of concurrent connections you may get on a web server can be calculated roughly using the following (N = average number of connections per request):
  # (worker_processes x worker_connections x N) / Average Request Time
  worker_connections 4096; # 1024, 8096 (quad-core processor)

  # Accept as many connections as possible.
  multi_accept on;

  # Set connection methods depending on the platform.
  # NOTE: Available modes are:
  # - select: Efficient method on Windows though it's the worst performing and is used when more efficient methods are not available on a platform;
  # - poll: Standard method;
  # - kqueue: Efficient method on FreeBSD, OpenBSD, NetBSD and Max OSX;
  # - epoll: Efficient method on Linux;
  # - /dev/poll: Solaris, IRIX;
  # - eventport: Efficient method on Solaris 10
  use epoll;

  # Worker processes MUST get the requests one by one
  # NOTE: This implies that the worker processes will not jump up for every request and go back to sleep if the number of requests is low.
  #
  # @see: https://en.m.wikipedia.org/wiki/Thundering_herd_problem
  # @see: https://en.m.wikipedia.org/wiki/Lock_convoy
  accept_mutex on;

  # Set the maximum time to wait for the existing worker process to accept the new connection before initiating a new process to execute the request.
  accept_mutex_delay 500ms;
}

http {
  # SPECIFIC SETTINGS FOR THE DOCKER IMAGE

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;
  server_tokens off;
  server_name_in_redirect off;
  # more_set_headers 'Server: Microsoft-IIS/8.5';

  client_body_buffer_size 128k;

  # Limit the transfer rate of individual client connections
  limit_rate 10m;

  # Set the maximum allowed file upload size
  client_max_body_size 10m; # 2097152k

  client_header_buffer_size 1k;

  # NOTE: If cookie data exceeds a certain size, the error is caused by an overly large header field sent by the client
  large_client_header_buffers 4 16k;
  output_buffers 1 32k;
  postpone_output 1460;

  client_header_timeout 180s;
  client_body_timeout 180s;
  send_timeout 180s;

  # server_names_hash_bucket_size 64;
  # server_name_in_redirect off;

  # Import a list of file extensions and their associated MIME types (It maps file name extension to MIME types of responses)
  # NOTE: The extensions are case insensitive and there can be many extensions mapped to one type.
  # NOTE: MIME types describe the media type of content and guides the browser so that it renders the content appropriately in the browser instead of downloading the file
  include /etc/nginx/mime.types;

  # Specify the default MIME type if Nginx fails to find a specific one in the /etc/nginx/mine.types.
  # NOTE: It is this MIME type that guides the browser that it has to download the file directly.
  default_type application/octet-stream;

  # Write the log in a specified format
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  # Error pages (Exceptions)
  error_page 401 /exceptions/401/index.html;
  error_page 403 /exceptions/403/index.html;
  error_page 404 /exceptions/404/index.html;
  error_page 405 /exceptions/405/index.html;
  error_page 406 /exceptions/406/index.html;
  error_page 412 /exceptions/412/index.html;
  error_page 500 502 503 504 /exceptions/50x/index.html;

  # NOTE: You need to disable gzip to avoid the removal of the ETag header
  gzip on;
  gzip_disable "MSIE [1-6].(?!.*SV1)";

  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_buffers 16 8k;
  gzip_http_version 1.1;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

  # open_file_cache max=5000 inactive=180;
  # open_file_cache_min_uses 3;

  # Use CloudFlare DNS and cache results for 1 hour
  # resolver 1.1.1.1 1.0.0.1 valid=1h;
 
  # Additional configuration imports
  include /etc/nginx/conf.d/*.conf;
  # include /etc/nginx/sites-enabled/*;
  # include /etc/nginx/naxsi_core.rules;
}
